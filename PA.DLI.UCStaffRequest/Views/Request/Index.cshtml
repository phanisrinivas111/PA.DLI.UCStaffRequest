
@{
    ViewBag.Title = "Index";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<!DOCTYPE html>
<html>
<head>

    <meta name="viewport" content="width=device-width" />
    <title>@ViewBag.Title</title>
    <div class="container">
        <br />
        <h4 style="color:#18406E">Request Form</h4>
        <br />
        <style>
            .mandatory::after {
                content: " *";
                color: black;
            }

            .form-input {
                width: 100%;
                padding: 10px;
                font-size: 16px;
                border: none;
                border-left: 6px solid black;
                background-color: #f9f9f9;
            }

            .upload-container {
                display: flex;
                align-items: center; /* Aligns items vertically centered */
                gap: 10px; /* Adds space between elements */
            }

            .file-info {
                display: flex;
                align-items: center;
                gap: 10px; /* Adds space between file name and buttons */
            }
        </style>
    </div>
</head>
<body>
    <div id="errorMessage" class="callout alert d-none" role="alert">
        <b>Please correct following error(s) to proceed</b>
        <ul style="list-style-position:inside" id="errorList">
            <il>
            </il>
        </ul>

    </div>
    <div class="form-container">
        <div class="row">
            <div class="col-lg-12 col-md-12 col-sm-12 col-xs-12">
                <fieldset class="form-group" style="margin:0px; ">
                    <label for="ddlCategory" style="padding:7.75px 0px" class="mandatory">Category</label>
                    <select id="ddlCategory" style="max-width:100%" name="Category" required>
                        <option value="" disabled selected>Select</option>
                    </select>
                </fieldset>
            </div>
        </div>


        <div class="row">
            <div class="col-lg-6 col-md-6 col-sm-12 form-group">
                <label for="email" class="mandatory">From Email</label>
                <input type="email" class="form-control" alphabetcomma id="email" maxlength="50" value="c-cnayudu@pa.gov" required readonly>
            </div>
            <div class="col-lg-6 col-md-6 col-sm-12 form-group">
                <label for="cc" class="font-weight-bold">CC</label>
                <input type="email" class="form-control" alphabetcomma id="cc" maxlength="200">
            </div>
        </div>

        <div class="row">
            <div class="col-lg-12 col-md-6 col-sm-12 col-xs-12 form-group">
                <label for="subject" class="mandatory">Subject</label>
                <input type="text" class="form-control" alphabetcomma id="subject" maxlength="100" required>
            </div>
        </div>
        <div class="row">
            <div class="col-lg-12 col-md-6 col-sm-12 col-xs-12 form-group">
                <label for="message" class="mandatory">Message</label>
                <textarea id="message" class="form-input" maxlength="4000" required></textarea>
            </div>
        </div>

        <div class="row">
            <div class="col-lg-12 col-md-12 col-sm-12 col-xs-12 form-group">
                <div class="upload-container">
                    <label for="fileUpload">
                        Upload:
                    </label>
                    <span style="font-size: 14px; color: #555;">
                        (Uploads are limited to <b>jpg, jpeg, png, pdf, txt, docx, xlsx</b> formats.)
                    </span>
                </div>

                <input type="file" id="fileUpload" class="form-control" accept=".jpg,.jpeg,.png,.pdf,.txt,.docx,.xlsx" style="display: none;" multiple />
                <button type="button" class="btn button-secondary btn-block" onclick="document.getElementById('fileUpload').click();" style="background-color: #444444; color: white; border: none; padding: 10px 0px; border-radius: 0; max-width: 150px;">
                    Upload File
                </button>

                <!-- Initially hidden grid for displaying file names -->
                <div id="fileList" class="col-md-12" style="width: 1081px; margin-top: 10px; display: none;">
                    <div class="table-responsive">
                        <table class="hover">
                            <thead>
                                <tr>
                                    <th>File Name</th>
                                    <th>Actions</th>
                                </tr>
                            </thead>
                            <tbody id="fileTableBody">
                                <!-- Dynamically populated files will appear here -->
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>







        <div class="row">
            <div class="col-lg-2 col-md-4 col-sm-12 form-group">
                <button class="btn button -secondary btn-block" value="Cancel" id="btnCancel">Cancel</button>
            </div>

            <div class="col-lg-2 col-md-4 col-sm-12 offset-lg-8 offset-md-4 form-group pull-right">
                <button class="btn button -primary btn-block" value="Submit" id="btnSubmit">Submit</button>
            </div>
        </div>
    </div>





</body>
</html>

@section Scripts {
    <script>
        const fileUpload = document.getElementById('fileUpload');
        const fileTableBody = document.getElementById('fileTableBody');
        const fileList = document.getElementById('fileList'); // Reference to the file list div
        let filesArray = [];

        $(document).ready(function () {
            GetCategories();

            $("#btnSubmit").click(function () {
                // Create a FormData object
                clearErrors();
                var formData = new FormData();
                formData.append("Category", $("#ddlCategory").val());
                formData.append("FromEmail", $("#email").val() );
                formData.append("CC", $("#cc").val());
                formData.append("Subject", $("#subject").val());
                formData.append("Message", $("#message").val());
                // Append each file from filesArray
                filesArray.forEach((file, index) => {
                    formData.append(`files[${index}]`, file); // Unique keys for each file
                });
                // Send AJAX request
                $.ajax({
                    url: "/Request/Submit", // Controller action URL
                    type: "POST",
                    data: formData,
                    contentType: false,
                    processData: false,
                    success: function (response) {
                        if (response.success) {
                            window.location.href = '/Request/Confirmation';
                        } else {
                            const errorMessageDiv = $('#errorMessage');
                            const errorList = $('#errorList');
                            // Display error message for unsuccessful addition
                            errorList.empty();
                            if (response.message && response.message.length > 0) {
                                response.message.forEach((m, index) => {
                                    $('#errorList').append(`<li id="m-${index}">${m}</li>`);
                                });
                            }
                            errorMessageDiv.removeClass('d-none');

                        }
                    },
                    error: function (xhr, status, error) {
                        alert("An error occurred: " + error);
                    }
                });
            });

            $("#btnCancel").click(function () {
                $('#ticketNumber').val('');
                $('#ddlCategory').val('');
                $('#cc').val('');
                $('#subject').val('');
                $('#message').val('');
                filesArray = [];
                fileTableBody.innerHTML = '';
                fileUpload.value = "";
                clearErrors();
                window.location.href = '/Search';
            });
        });
        fileUpload.addEventListener('change', function () {
            const files = Array.from(this.files);
            const allowedExtensions = ['jpg', 'jpeg', 'png', 'pdf', 'txt', 'docx', 'xlsx']; // Allowed file formats
            const errorMessageDiv = $('#errorMessage');
            const errorList = $('#errorList');
            let totalFileSize = filesArray.reduce((total, file) => total + file.size, 0); // Calculate current total size of filesArray

            files.forEach(file => {
                if (file) {
                    errorList.empty(); // Clear error messages for every file check

                    // Extract the file extension
                    const fileExtension = file.name.split('.').pop().toLowerCase();

                    // Check for disallowed file formats
                    if (!allowedExtensions.includes(fileExtension)) {
                        errorList.append('<li id="m-1">Invalid file format. Allowed formats: ' + allowedExtensions.join(', ') + '.</li>');
                        errorMessageDiv.removeClass('d-none');
                        return;
                    }

                    // Check if the file already exists in the array
                    const fileExists = filesArray.some(existingFile => existingFile.name === file.name && existingFile.size === file.size);
                    if (fileExists) {
                        errorList.append('<li id="m-2">This file has already been uploaded.</li>');
                        errorMessageDiv.removeClass('d-none');
                        return;
                    }

                    // Check individual file size limit (20 MB = 20 * 1024 * 1024 bytes)
                    if (file.size > 20 * 1024 * 1024) {
                        errorList.append('<li id="m-3">Max size of attachments cannot exceed 20MB per file.</li>');
                        errorMessageDiv.removeClass('d-none');
                        return;
                    }

                    // Check total size limit (20 MB = 20 * 1024 * 1024 bytes)
                    if (totalFileSize + file.size > 20 * 1024 * 1024) {
                        errorList.append('<li id="m-4">Total size of all attachments cannot exceed 20MB.</li>');
                        errorMessageDiv.removeClass('d-none');
                        return;
                    }

                    // Add file to array and update total size
                    filesArray.push(file);
                    totalFileSize += file.size;

                    // Update file table
                    updateFileTable();

                    // Show the file list grid when a file is uploaded
                    fileList.style.display = 'block';

                    // Clear file input to allow re-uploading
                    this.value = '';
                }
            });
        });


        function updateFileTable() {
            fileTableBody.innerHTML = '';
            filesArray.forEach((file, index) => {
                const row = document.createElement('tr');
                row.innerHTML = `
                        <td style="padding: 4px; font-size: 16px;">
                            ${file.name}
                        </td>
                        <td class="file-actions" style="padding: 4px;">
                            <a href="javascript:void(0)" onclick="removeFile(${index})" style="font-size: 16px; color: navy; cursor: pointer; text-decoration: none;">
                                Remove <i class="fa fa-trash" aria-hidden="true"></i>
                            </a>
                        </td>
                    `;
                fileTableBody.appendChild(row);
            });
        }

        function removeFile(index) {
            // Remove the file from the array and update the table
            filesArray.splice(index, 1);
            updateFileTable();

            // Hide the file list grid if no files are left
            if (filesArray.length === 0) {
                fileList.style.display = 'none';
            }
        }

        function GetCategories() {
            $.ajax({
                url: '/Admin/GetCategoriesList', // Endpoint to get roles
                type: 'GET',
                success: function (response) {
                    if (response.success) {
                        //console.log('roles when sucess-------------', response.data);
                        // Empty the existing dropdown options
                        var categoryDropdown = $('#ddlCategory');
                        categoryDropdown.empty();
                        // Add the default "Select" option
                        categoryDropdown.append('<option value="" disabled selected>Select</option>');
                        // Populate the dropdown with the roles from the server
                        response.data.forEach(function (role) {
                            categoryDropdown.append(
                                $('<option></option>')
                                    .val(role.value)
                                    .text(role.text)
                            );
                        });
                    } else {
                        console.error('Error fetching categories:', response.message);
                    }
                },
                error: function (xhr, status, error) {
                    console.log(xhr.message);
                    console.log("error in categories", error.message);
                    console.error('Error:', error);
                    alert('Failed to fetch categories');
                }
            });

        }
        function clearErrors() {
            // Clear previous error messages
            const errorMessageDiv = $('#errorMessage');
            const errorList = $('#errorList');

            errorList.empty();
            errorMessageDiv.addClass('d-none'); // Hide the error div initially
            const errors = [];
        }

    </script>
}
